// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Aleksei-D/go-loyalty-system/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrderRepository) Add(ctx context.Context, login, orderNumber string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, login, orderNumber)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockOrderRepositoryMockRecorder) Add(ctx, login, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderRepository)(nil).Add), ctx, login, orderNumber)
}

// GetAllByLogin mocks base method.
func (m *MockOrderRepository) GetAllByLogin(ctx context.Context, login string) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByLogin", ctx, login)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByLogin indicates an expected call of GetAllByLogin.
func (mr *MockOrderRepositoryMockRecorder) GetAllByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByLogin", reflect.TypeOf((*MockOrderRepository)(nil).GetAllByLogin), ctx, login)
}

// GetNotAcceptedOrderNumbers mocks base method.
func (m *MockOrderRepository) GetNotAcceptedOrderNumbers(ctx context.Context, limit, updateTimeout uint) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotAcceptedOrderNumbers", ctx, limit, updateTimeout)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotAcceptedOrderNumbers indicates an expected call of GetNotAcceptedOrderNumbers.
func (mr *MockOrderRepositoryMockRecorder) GetNotAcceptedOrderNumbers(ctx, limit, updateTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotAcceptedOrderNumbers", reflect.TypeOf((*MockOrderRepository)(nil).GetNotAcceptedOrderNumbers), ctx, limit, updateTimeout)
}

// GetOrderByNumber mocks base method.
func (m *MockOrderRepository) GetOrderByNumber(ctx context.Context, orderNumber string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByNumber), ctx, orderNumber)
}

// IsExist mocks base method.
func (m *MockOrderRepository) IsExist(ctx context.Context, orderNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, orderNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockOrderRepositoryMockRecorder) IsExist(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockOrderRepository)(nil).IsExist), ctx, orderNumber)
}

// UpdateStatus mocks base method.
func (m *MockOrderRepository) UpdateStatus(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStatus), ctx, order)
}
